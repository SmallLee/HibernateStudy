1.对象的持久化
    狭义的理解：把对象永久保存到数据库
    广义的理解：包括和数据库相关的各种操作
    加载：为了能在系统中找到所需的对象，需要为每一个对象分配一个i额唯一的标识，，
    在关系型数据库中称为主键，而在对象术语中，称为对象标识OID(Object identifier)

2.查看mysql支持什么存储引擎show engines;
   查看mysql当前默认的存储引擎：show variables like '%storage_engine%';
   +----------------------------+--------+
   | Variable_name              | Value  |
   +----------------------------+--------+
   | default_storage_engine     | InnoDB |
   | default_tmp_storage_engine | InnoDB |
   | storage_engine             | InnoDB |
   +----------------------------+--------+
   查看某个表用了什么引擎 show create table 表名;
| Table   | Create Table                                                                                                                                                                                                  |
+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| android | CREATE TABLE `android` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `num` int(11) DEFAULT NULL,
  `name` varchar(3) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1 |

3.可以不配置hibernate使用的方言，这个时候hibernate会根据mysql驱动的版本自动选择对应的方言
如果想让hibernate自动建表，则配置hibernate使用的数据库方言是要选择MySQL5Dialect
MySQLInnoDBDialect已经过时了，不能选择这个，否则hibernate无法自动建表

4.主键配置
 <id name="id" type="java.lang.Integer">
            <column name="ID"/>
            由 Hibernate 根据使用的数据库自行判断采用哪种主键生成方式。
            <generator class="native"/>
        </id>
主键必须有且只有一个，必须放在普通属性的前面，普通属性使用property节点描述

5.windows下mysql表名不自动转换小写配置
查看mysql是否是将表名自动转为小写  show variables like '%lower_case_table_names%';

6.开发步骤
    1)创建Hibernate配置文件cfg.xml
    2)创建对象关系映射文件hbm.xml
    3)创建持久化类
    4)通过Hibernate API编写访问数据库的代码

7.Configuration类负责管理Hibernate的配置信息，可以使用默认的配置，也可以从文件中加载配置
SessionFactory在Hibernate中实际起到了一个缓冲区的作用，它缓冲了Hibernate自动生成的SQL语句和一些其它的映射数据，
还缓冲了一些将来有可能重复利用的数据
ServiceRegistry：基于hibernate的服务和配置必须注册在ServiceRegistry中

hbm2ddl.auto取值：
    create:每次都重新生成表
    create-drop：生成表，但是SessionFactory一关闭，表就被删除了
    update:若表结构不一样，修改表结构，不会删除已有的行和列
    validate:会和数据库中的表进行比较，若hbm中列在数据库中不存在，会抛出异常
    8.show full columns from news2;查看表中所有列的信息，结果如下
    +----------+--------------+-------------------+------+-----+---------+----------------+---------------------------------+---------+
    | Field    | Type         | Collation         | Null | Key | Default | Extra          | Privileges                      | Comment |
    +----------+--------------+-------------------+------+-----+---------+----------------+---------------------------------+---------+
    | ID2      | int(11)      | NULL              | NO   | PRI | NULL    | auto_increment | select,insert,update,references |         |
    | TITLE2   | varchar(255) | latin1_swedish_ci | YES  |     | NULL    |                | select,insert,update,references |         |
    | CONTENT2 | varchar(255) | latin1_swedish_ci | YES  |     | NULL    |                | select,insert,update,references |         |
    | DATE2    | datetime     | NULL              | YES  |     | NULL    |                | select,insert,update,references |         |
    +----------+--------------+-------------------+------+-----+---------+----------------+---------------------------------

    9.Hibernate插入中文报错
        Caused by: java.sql.SQLException: Incorrect string value: '\xE6\x96\xB0\xE9\x97\xBB'
        for column 'TITLE2' at row 1

        修改表的默认编码 alter table student DEFAULT CHARACTER set utf8;

     10.mysql 连接url中useUnicode=true&characterEncoding=UTF-8 的作用
     添加的作用是：指定字符的编码、解码格式。
                  例如：mysql数据库用的是gbk编码，而项目数据库用的是utf-8编码。这时候如果添加了
                  useUnicode=true&characterEncoding=UTF-8 ，
                  那么作用有如下两个方面：
     1. 存数据时：
          数据库在存放项目数据的时候会先用UTF-8格式将数据解码成字节码，然后再将解码后的字节码重新使用GBK编
          码存放到数据库中。
     2.取数据时：
          在从数据库中取数据的时候，数据库会先将数据库中的数据按GBK格式解码成字节码，然后再将解码后的字节码重
          新按UTF-8格式编码数据，最后再将数据返回给客户端。
    11.修改表的所有字段的编码
    alter table `tablename` convert to character set utf8;
    修改表的某个字段的编码

    12.flush:使数据库中的记录和Session缓存中对象的状态保持一致，为了保持一致，则可能发送sql语句
        1.在transcaction的commit方法中，先调用session的flush方法，再commit
        2.flush可能会发送sql语句，但是不会提交事务
        注意：
            在没有调用commit或者显式调用session的flush方法时，也有可能调用flush方法
            1.执行HQL或者QBC查询，会先进行flush，以得到数据表的最新数据
            2.若记录的id是由底层数据库使用自增的方式生成的，则在调用save犯法之后，会立刻发送sql
            语句，因为save方法之后，必须保证对象的id是存在的
    13。refresh:强制发送select语句，以保证缓存中对象的状态和数据库一致，refresh方法要配置数据库的隔离级别为2
      clear:执行同样的查找操作，只会发送一条select语句，因为第二次是从缓存中获取的，
      在获取前调用session的clear方法，可以清除缓存，重新发送selec语句
